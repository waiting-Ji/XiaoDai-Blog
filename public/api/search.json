[{"id":"eb5f3adb17521be888d5fac1c7b84dc0","title":"redis","content":"Redis简介Redis是基于内存进行数据查询的Redis可用作数据库、缓存和消息中间件NoSql，不仅仅是SQL，泛指非关系型数据库。NoSql数据库并不是取代关系型数据库，而是关系型数据库的补充。\n应用场景\n缓存（秒杀业务）\n任务队列\n消息队列\n分布式锁\n\n关系型数据库\nMysql\nOracle\nDB2\nSQLServer\n\n非关系型数据库\nRedis\nMongo db\nMemCacched\n\nRedis安装镜像文件下载地址：https://download.redis.io/releases/\n\n将下载的redis.tar.gz文件上传至Linux目录下（例：/usr/addFile/targz）\n\n解压redis.tar.gz文件（解压至/usr/addFile文件夹下）:::infotar -zxvf redis-4.0.0.tar.gz  -C /usr/addFile/:::\n\n安装Redis的依赖环境g6c,命令：yum install gcc-c+\n\n进入/usr/addFile/redis-4.0.0,进行编译，命令：make\n\n进入redis的src目录，进行安装，命令：make install\nRedis服务启动与停止Linux中redis服务启动，可以使用redis-server（/usr/addFile/redis-4.0.0），默认端口为6379Ctrl+C停止Redis服务\n修改Redis运行模式\n进入redis-4.0.0文件下时 vim redis-conf文件查找dae （输入：/dae）\n\ndaemonize no 改为 daemonize yes 则运行模式为后台运行\n\n\n\n修改Redis密码\n进入redis-4.0.0文件下时 vim redis-conf文件查找password （输入：/password）\n将下图中#取出 修改fooabred为自定义密码\n\n密码配置成功后重启服务器\n\n启动时查看配置文件：./src/redis-server ./redis.conf\n查看redis进程：ps -f | grep redis\n本地连接Redis：./src/redis-cli -h localhost -p 6379\n查看不输入密码是否可以对Redis进行操作：keys *（橙色框中是不允许）\n则需输入密码登录Redis：auth 密码\n登录成功\n\n\n修改Redis连接状态Redis默认本地连接\n\n进入redis-4.0.0文件下时 vim redis-conf文件查找bind（输入：/bind）\n注释橙色框选中行（# bind 127.0.0.1）\n\n\nRedis数据类型中文教程网：https://www.redis.net.cn/tutorial/3505.html\nString（字符串）\nstring是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。\nstring类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。\nstring类型是Redis最基本的数据类型，一个键最大能存储512MB。理解一个键对应一个字符串，一个地址存储一个数据实例:::inforedis 127.0.0.1:6379&gt; SET name “redis.net.cn”OKredis 127.0.0.1:6379&gt; GET name”redis.net.cn”:::在以上实例中我们使用了 Redis 的 SET 和 GET 命令。键为 name，对应的值为redis.net.cn。\n\n注意：一个键最大能存储512MB。\n\nHash（哈希）\nRedis hash 是一个键值对集合。\nRedis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。value值必须是基础类型\n相对于存储json序列化的字符串更加节省性能理解一个键对应一个集合，集合中索引可存储多条个数据实例:::inforedis 127.0.0.1:6379&gt; HMSET user:1 username redis.net.cn password redis.net.cn points 200OKredis 127.0.0.1:6379&gt; HGETALL user:1\n\n\n“username”\n“redis.net.cn”\n“password”\n“redis.net.cn”\n“points”\n“200”redis 127.0.0.1:6379&gt;:::以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 Redis HMSET, HEGTALL 命令，user:1 为键值。每个 hash 可以存储 232 - 1 键值对（40多亿）。\n\n\nList（列表）Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。\n理解呈现状态为列表状，数据不可通过标识或索引对数据进行获取，只能通过列表名查询范围内的多条数据\n实例:::inforedis 127.0.0.1:6379&gt; lpush redis.net.cn redis(integer) 1redis 127.0.0.1:6379&gt; lpush redis.net.cn mongodb(integer) 2redis 127.0.0.1:6379&gt; lpush redis.net.cn rabitmq(integer) 3// 查询数据范围 0 -10 条redis 127.0.0.1:6379&gt; lrange redis.net.cn 0 10\n\n“rabitmq”\n“mongodb”\n“redis”redis 127.0.0.1:6379&gt;:::列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。\n\n\nSet（集合）Redis的Set是string类型的无序集合。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。\nsadd 命令添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误。sadd key member\n理解呈现状态为列表状，数据不可通过标识或索引对数据进行获取，只能通过命名进行数据获取，而且在数据添加时不允许出现重复插入\n实例:::inforedis 127.0.0.1:6379&gt; sadd redis.net.cn redis(integer) 1redis 127.0.0.1:6379&gt; sadd redis.net.cn mongodb(integer) 1redis 127.0.0.1:6379&gt; sadd redis.net.cn rabitmq(integer) 1redis 127.0.0.1:6379&gt; sadd redis.net.cn rabitmq(integer) 0redis 127.0.0.1:6379&gt; smembers redis.net.cn \n\n“rabitmq”\n“mongodb”\n“redis”:::\n\n注意：以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。\n\nzset(sorted set：有序集合)Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。\nzadd 命令添加元素到集合，元素在集合中存在则更新对应scorezadd key score member \n实例:::inforedis 127.0.0.1:6379&gt; zadd redis.net.cn 0 redis(integer) 1redis 127.0.0.1:6379&gt; zadd redis.net.cn 0 mongodb(integer) 1redis 127.0.0.1:6379&gt; zadd redis.net.cn 0 rabitmq(integer) 1redis 127.0.0.1:6379&gt; zadd redis.net.cn 0 rabitmq(integer) 0redis 127.0.0.1:6379&gt; ZRANGEBYSCORE redis.net.cn 0 1000 \n\n“redis”\n“mongodb”\n“rabitmq”:::\n\n","slug":"【Redis】安装与学习","date":"2022-10-13T07:54:00.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post1$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server1$ hexo server\n\nMore info: Server\nGenerate static files1$ hexo generate\n\nMore info: Generating\nDeploy to remote sites1$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-10-13T07:44:02.696Z","categories_index":"","tags_index":"","author_index":"Aurora"}]