{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","path":"static/css/404.1a6cd5bd.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.32dfa3b0.css","path":"static/css/about.32dfa3b0.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.0d31776f.css","path":"static/css/app.0d31776f.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.c0d49bd5.css","path":"static/css/archives.c0d49bd5.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","path":"static/css/categories.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.749ad047.css","path":"static/css/page.749ad047.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","path":"static/css/result.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","path":"static/css/tags.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","path":"static/img/default-cover.df7c128c.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.00d640a8.js","path":"static/js/404.00d640a8.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.024aacd1.js","path":"static/js/about.024aacd1.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js","path":"static/js/app.6d2c358d.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.574ac664.js","path":"static/js/archives.574ac664.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.90aa5475.js","path":"static/js/categories.90aa5475.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.dc6146cd.js","path":"static/js/chunk-libs.dc6146cd.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a02618ad.js","path":"static/js/page.a02618ad.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.cebfbaa4.js","path":"static/js/post.cebfbaa4.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.39470350.js","path":"static/js/result.39470350.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.2ad613f5.js","path":"static/js/tags.2ad613f5.js","modified":0,"renderable":1},{"_id":"source/static/image.png","path":"static/image.png","modified":0,"renderable":0},{"_id":"source/static/mylog_logo.png","path":"static/mylog_logo.png","modified":0,"renderable":0},{"_id":"source/static/GitHub-Mark-120px-plus.png","path":"static/GitHub-Mark-120px-plus.png","modified":0,"renderable":0},{"_id":"source/static/blibli.jpg","path":"static/blibli.jpg","modified":0,"renderable":0},{"_id":"source/static/gitee.png","path":"static/gitee.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1665642054732},{"_id":"node_modules/hexo-theme-aurora/.browserslistrc","hash":"db215b841182d2af3259a1c1d6e1957bca333970","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/_config.yml","hash":"e6b2335cb393444b8a1fc1ad65331f4a30bc8915","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG_CN.md","hash":"5d13c251e8b77fd86870da50f3be98f8822edc66","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/package.json","hash":"1b312a6a2de107ba9dc952614f1078c78664a4e4","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG.md","hash":"e68f3af8af17d326a48e1b317e01d7429193217e","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/data/cn.yml","hash":"4f5dcc1e2953df7a8e4e683c1a9115f6e0041f5e","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/README.md","hash":"c50f58b08b75780990c18ab85761e3e24aac0d90","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/jest.config.js","hash":"425f08cb718a56630ce61ae0686f35c55ef565df","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/.circleci/config.yml","hash":"534051be311581f69aa8287120275a04539290e4","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/scripts/index.js","hash":"2a3c62a860581ee6813ca4bcaa7c952f614e818c","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/data/en.yml","hash":"7bbd6c0da0ae2f93f8a786a3be77fbe4e95a787e","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/filters/index.js","hash":"5eacff9446dd6c9a7eb0a0c84be9187055440454","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/category.js","hash":"0ae21ffcf6e471ebfb72ac62a833991fae86ec8a","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/index.js","hash":"dfbb0fdbf990bd67684ed891a4aaa1fd8dcd23f2","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/page.js","hash":"1be54ea9cdf8e293e67bf457075fcdd8a72b8779","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/search.js","hash":"a2a636e1df76efdcaca37226b490afa539ce766b","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/post.js","hash":"76c3268e8b6887fb1fd11c4d71004aad9dc215fc","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/site.js","hash":"b5f5ce813b4b0b322eceb11b036dc65201604256","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/statistic.js","hash":"1c641956e15cec96490de16a88ccc7bec0c9d5c4","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/tag.js","hash":"975e79e73d2503a33dbc63655b948100cc46d44f","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/mapper.js","hash":"7a99508d910321b90b4afa0df02ad90f62336901","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/symbols-count-time.js","hash":"d1a81e31b2988edcdf4b4761cec7326a980f097a","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/toc.js","hash":"5c7348c550ef7f164d492847801a360cdefc60a2","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/truncate-html.js","hash":"49d4832af027eabe5b8383a24e66dceae761533e","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/utils.js","hash":"93ff75f0e35a1dc40d5406cc097f5988dd820600","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/injector/index.js","hash":"7ca562ea3af3068ee925b5a8afdce0eaa1e15e64","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/layout/index.ejs","hash":"94732830a65b718d2fa506b8598df44f14399fd8","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1665646266300},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":1665646266300},{"_id":"source/_posts/【Redis】安装与学习.md","hash":"2b8aac978bca8000661e5c4a794d43c2034a19b0","modified":1666364257533},{"_id":"source/_posts/docker.md","hash":"c5ff7298c1cd952bf965104ba5f4cbd0fef78ba5","modified":1665647641093},{"_id":"public/api/posts/1.json","hash":"44dab83d0b0b17a19d04c38eb0d27d2b2247c9bb","modified":1666319752808},{"_id":"public/api/articles/【Redis】安装与学习.json","hash":"bb317a0cfe69b6ee1349bf7ba3e1dd01cf93696e","modified":1666319752808},{"_id":"public/api/articles/hello-world.json","hash":"23a9a9b927defad2f624c409d379c3d95d70d8c8","modified":1666319752808},{"_id":"public/api/features.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1666319752808},{"_id":"public/api/authors/blog-author.json","hash":"59882eaf0a7de126edbc089b189e46ac288c24e5","modified":1666319752808},{"_id":"public/api/site.json","hash":"54de84e58f8a3bba118641a0f225b30bd2be16f3","modified":1666319752808},{"_id":"public/api/categories.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1666319752808},{"_id":"public/api/tags.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1666319752808},{"_id":"public/api/statistic.json","hash":"e6d32949ab3076a089be0ac90254c2111ef75b02","modified":1666319752808},{"_id":"public/api/search.json","hash":"f4deeca4142b87ad32de1ae3a7d48cccf68af982","modified":1666319752808},{"_id":"public/2022/10/13/【Redis】安装与学习/index.html","hash":"5f8f374f0327349e7382d013f3e57e3daa1bd1ff","modified":1666319752808},{"_id":"public/2022/10/13/hello-world/index.html","hash":"5f8f374f0327349e7382d013f3e57e3daa1bd1ff","modified":1666319752808},{"_id":"public/index.html","hash":"5f8f374f0327349e7382d013f3e57e3daa1bd1ff","modified":1666319752808},{"_id":"public/tags/index.html","hash":"5f8f374f0327349e7382d013f3e57e3daa1bd1ff","modified":1666319752808},{"_id":"public/archives/index.html","hash":"5f8f374f0327349e7382d013f3e57e3daa1bd1ff","modified":1666319752808},{"_id":"public/tags/search/index.html","hash":"5f8f374f0327349e7382d013f3e57e3daa1bd1ff","modified":1666319752808},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1666319752808},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1666319752808},{"_id":"public/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1666319752808},{"_id":"public/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1666319752808},{"_id":"public/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1666319752808},{"_id":"public/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1666319752808},{"_id":"public/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1666319752808},{"_id":"public/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1666319752808},{"_id":"public/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1666319752808},{"_id":"public/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1666319752808},{"_id":"public/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1666319752808},{"_id":"public/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1666319752808},{"_id":"public/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1666319752808},{"_id":"public/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1666319752808},{"_id":"public/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":1666319752808},{"_id":"public/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1666319752808},{"_id":"public/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1666319752808},{"_id":"public/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1666319752808},{"_id":"public/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1666319752808},{"_id":"public/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1666319752808},{"_id":"public/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1666319752808},{"_id":"public/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":1666319752808},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1666319752808},{"_id":"public/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1666319752808},{"_id":"source/_posts/static/image.png","hash":"c9c2b235dcbaa8325537ddade31272c37b4efcb1","modified":1666357995024},{"_id":"source/_posts/static/mylog_logo.png","hash":"31d806c63facd062e0007ae8c37038f90c87fde6","modified":1666321265706},{"_id":"source/static/image.png","hash":"c9c2b235dcbaa8325537ddade31272c37b4efcb1","modified":1666357995024},{"_id":"source/static/mylog_logo.png","hash":"31d806c63facd062e0007ae8c37038f90c87fde6","modified":1666321265706},{"_id":"source/static/GitHub-Mark-120px-plus.png","hash":"8e4af8e0da1da6fb685e86c19afb5322d559a8ca","modified":1366059086000},{"_id":"source/static/gitee.png","hash":"d757673bb8d1f5d3459e688a2cd0e40a07fad110","modified":1666363364586},{"_id":"source/static/blibli.jpg","hash":"249748c3b5d1354152eb3469b82c9707482c0997","modified":1666363265709}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-10-13T07:44:02.696Z","updated":"2022-10-13T06:20:54.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl96rfr9k0000z8ewebs9cdzs","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"【Redis】安装与学习","date":"2022-10-13T07:54:00.000Z","_content":"# Redis简介\nRedis是基于内存进行数据查询的\nRedis可用作数据库、缓存和消息中间件\nNoSql，不仅仅是SQL，泛指非关系型数据库。NoSql数据库并不是取代关系型数据库，而是关系型数据库的补充。\n## 应用场景\n\n   1. 缓存（秒杀业务）\n   2. 任务队列\n   3. 消息队列\n   4. 分布式锁\n\n## 关系型数据库\n\n   1. Mysql\n   2. Oracle\n   3. DB2\n   4. SQLServer\n   \n## 非关系型数据库\n\n   1. Redis\n   2. Mongo db\n   3. MemCacched\n   \n# Redis安装\n镜像文件下载地址：[https://download.redis.io/releases/](https://download.redis.io/releases/)\n\n1. 将下载的redis.tar.gz文件上传至Linux目录下（例：/usr/addFile/targz）\n2. 解压redis.tar.gz文件（解压至/usr/addFile文件夹下）\n:::info\ntar -zxvf redis-4.0.0.tar.gz  -C /usr/addFile/\n:::\n\n3. 安装Redis的依赖环境g6c,命令：yum install gcc-c+\n4. 进入/usr/addFile/redis-4.0.0,进行编译，命令：make\n5. 进入redis的src目录，进行安装，命令：make install\n# Redis服务启动与停止\nLinux中redis服务启动，可以使用redis-server（/usr/addFile/redis-4.0.0），默认端口为6379\nCtrl+C停止Redis服务\n## 修改Redis运行模式\n\n1. 进入redis-4.0.0文件下时 vim redis-conf文件查找dae （输入：/dae）\n2. daemonize no 改为 daemonize yes 则运行模式为后台运行\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/25847601/1664498711764-cdc8e5dd-9916-4cd3-8196-a499d50763a6.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=516&id=u4e7324a0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=645&originWidth=1159&originalType=binary&ratio=1&rotation=0&showTitle=false&size=67757&status=done&style=none&taskId=u97e97493-3b1d-4fec-a951-b5d5bbf634c&title=&width=927.2)\n## 修改Redis密码\n\n1. 进入redis-4.0.0文件下时 vim redis-conf文件查找password （输入：/password）\n2. 将下图中#取出 修改fooabred为自定义密码\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/25847601/1664500114163-7ec1ecb3-8ce2-4d19-a7e7-9a5047eb41c4.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=516&id=u1b58df5c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=645&originWidth=1159&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57202&status=done&style=none&taskId=uacfc467a-0024-414c-89a6-cbc05022651&title=&width=927.2)\n密码配置成功后重启服务器\n\n1. 启动时查看配置文件：./src/redis-server ./redis.conf\n2. 查看redis进程：ps -f | grep redis\n3. 本地连接Redis：./src/redis-cli -h localhost -p 6379\n4. 查看不输入密码是否可以对Redis进行操作：keys *（橙色框中是不允许）\n5. 则需输入密码登录Redis：auth 密码\n6. 登录成功\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/25847601/1664501322020-1312e33d-e557-471d-829a-7b3a2ea3f25b.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=190&id=u5e262813&margin=%5Bobject%20Object%5D&name=image.png&originHeight=237&originWidth=1034&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28432&status=done&style=none&taskId=u2f518cc5-6f99-465c-83c4-df46b3e285b&title=&width=827.2)\n## 修改Redis连接状态\nRedis默认本地连接\n\n1. 进入redis-4.0.0文件下时 vim redis-conf文件查找bind（输入：/bind）\n2. 注释橙色框选中行（# bind 127.0.0.1）\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/25847601/1664501751303-7b5e20d2-4fa9-4f36-9dac-f88113eb471f.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=516&id=uef989933&margin=%5Bobject%20Object%5D&name=image.png&originHeight=645&originWidth=1159&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56473&status=done&style=none&taskId=u21454d45-ece4-4cc8-81cf-3ee3a327c6c&title=&width=927.2)\n# Redis数据类型\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/25847601/1664503603409-7486794b-a434-4b7b-80bf-a225a541f715.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=354&id=ud29f1d42&margin=%5Bobject%20Object%5D&name=image.png&originHeight=442&originWidth=882&originalType=binary&ratio=1&rotation=0&showTitle=false&size=154743&status=done&style=none&taskId=u74c6f0f8-3960-45c0-bd1d-283bcd38b5e&title=&width=705.6)\n中文教程网：[https://www.redis.net.cn/tutorial/3505.html](https://www.redis.net.cn/tutorial/3505.html)\n## String（字符串）\n\n1. string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。\n2. string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。\n3. string类型是Redis最基本的数据类型，一个键最大能存储512MB。\n### 理解\n一个键对应一个字符串，\n一个地址存储一个数据\n### 实例\n:::info\nredis 127.0.0.1:6379> SET name \"redis.net.cn\"OK\nredis 127.0.0.1:6379> GET name\"redis.net.cn\"\n:::\n在以上实例中我们使用了 Redis 的 **SET** 和 **GET** 命令。键为 name，对应的值为redis.net.cn。\n**注意：**一个键最大能存储512MB。\n\n---\n\n## Hash（哈希）\n\n1. Redis hash 是一个键值对集合。\n2. Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。value值必须是基础类型\n3. 相对于存储json序列化的字符串更加节省性能\n### 理解\n一个键对应一个集合，\n集合中索引可存储多条个数据\n### 实例\n:::info\nredis 127.0.0.1:6379> HMSET user:1 username redis.net.cn password redis.net.cn points 200OK\nredis 127.0.0.1:6379> HGETALL user:1\n1) \"username\"\n2) \"redis.net.cn\"\n3) \"password\"\n4) \"redis.net.cn\"\n5) \"points\"\n6) \"200\"\nredis 127.0.0.1:6379>\n:::\n以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 Redis **HMSET, HEGTALL** 命令，**user:1** 为键值。\n每个 hash 可以存储 232 - 1 键值对（40多亿）。\n\n---\n\n## List（列表）\nRedis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。\n### 理解\n呈现状态为列表状，数据不可通过标识或索引对数据进行获取，\n只能通过列表名查询范围内的多条数据\n### 实例\n:::info\nredis 127.0.0.1:6379> lpush redis.net.cn redis(integer) 1\nredis 127.0.0.1:6379> lpush redis.net.cn mongodb(integer) 2\nredis 127.0.0.1:6379> lpush redis.net.cn rabitmq(integer) 3\n// 查询数据范围 0 -10 条\nredis 127.0.0.1:6379> lrange redis.net.cn 0 10\n1) \"rabitmq\"\n2) \"mongodb\"\n3) \"redis\"\nredis 127.0.0.1:6379>\n:::\n列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。\n\n---\n\n## Set（集合）\nRedis的Set是string类型的无序集合。\n集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。\n### sadd 命令\n添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误。\nsadd key member\n### 理解\n呈现状态为列表状，数据不可通过标识或索引对数据进行获取，\n只能通过命名进行数据获取，而且在数据添加时不允许出现重复插入\n### 实例\n:::info\nredis 127.0.0.1:6379> sadd redis.net.cn redis(integer) 1\nredis 127.0.0.1:6379> sadd redis.net.cn mongodb(integer) 1\nredis 127.0.0.1:6379> sadd redis.net.cn rabitmq(integer) 1\nredis 127.0.0.1:6379> sadd redis.net.cn rabitmq(integer) 0\nredis 127.0.0.1:6379> smembers redis.net.cn \n1) \"rabitmq\"\n2) \"mongodb\"\n3) \"redis\"\n:::\n**注意：**以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。\n集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。\n\n---\n\n## zset(sorted set：有序集合)\nRedis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。\nzset的成员是唯一的,但分数(score)却可以重复。\n### zadd 命令\n添加元素到集合，元素在集合中存在则更新对应score\nzadd key score member \n### 实例\n:::info\nredis 127.0.0.1:6379> zadd redis.net.cn 0 redis(integer) 1\nredis 127.0.0.1:6379> zadd redis.net.cn 0 mongodb(integer) 1\nredis 127.0.0.1:6379> zadd redis.net.cn 0 rabitmq(integer) 1\nredis 127.0.0.1:6379> zadd redis.net.cn 0 rabitmq(integer) 0\nredis 127.0.0.1:6379> ZRANGEBYSCORE redis.net.cn 0 1000 \n1) \"redis\"\n2) \"mongodb\"\n3) \"rabitmq\"\n:::\n","source":"_posts/【Redis】安装与学习.md","raw":"---\ntitle: 【Redis】安装与学习\ndate: 2022-10-13 15:54:00\ntags:\n   -运维\n---\n# Redis简介\nRedis是基于内存进行数据查询的\nRedis可用作数据库、缓存和消息中间件\nNoSql，不仅仅是SQL，泛指非关系型数据库。NoSql数据库并不是取代关系型数据库，而是关系型数据库的补充。\n## 应用场景\n\n   1. 缓存（秒杀业务）\n   2. 任务队列\n   3. 消息队列\n   4. 分布式锁\n\n## 关系型数据库\n\n   1. Mysql\n   2. Oracle\n   3. DB2\n   4. SQLServer\n   \n## 非关系型数据库\n\n   1. Redis\n   2. Mongo db\n   3. MemCacched\n   \n# Redis安装\n镜像文件下载地址：[https://download.redis.io/releases/](https://download.redis.io/releases/)\n\n1. 将下载的redis.tar.gz文件上传至Linux目录下（例：/usr/addFile/targz）\n2. 解压redis.tar.gz文件（解压至/usr/addFile文件夹下）\n:::info\ntar -zxvf redis-4.0.0.tar.gz  -C /usr/addFile/\n:::\n\n3. 安装Redis的依赖环境g6c,命令：yum install gcc-c+\n4. 进入/usr/addFile/redis-4.0.0,进行编译，命令：make\n5. 进入redis的src目录，进行安装，命令：make install\n# Redis服务启动与停止\nLinux中redis服务启动，可以使用redis-server（/usr/addFile/redis-4.0.0），默认端口为6379\nCtrl+C停止Redis服务\n## 修改Redis运行模式\n\n1. 进入redis-4.0.0文件下时 vim redis-conf文件查找dae （输入：/dae）\n2. daemonize no 改为 daemonize yes 则运行模式为后台运行\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/25847601/1664498711764-cdc8e5dd-9916-4cd3-8196-a499d50763a6.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=516&id=u4e7324a0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=645&originWidth=1159&originalType=binary&ratio=1&rotation=0&showTitle=false&size=67757&status=done&style=none&taskId=u97e97493-3b1d-4fec-a951-b5d5bbf634c&title=&width=927.2)\n## 修改Redis密码\n\n1. 进入redis-4.0.0文件下时 vim redis-conf文件查找password （输入：/password）\n2. 将下图中#取出 修改fooabred为自定义密码\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/25847601/1664500114163-7ec1ecb3-8ce2-4d19-a7e7-9a5047eb41c4.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=516&id=u1b58df5c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=645&originWidth=1159&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57202&status=done&style=none&taskId=uacfc467a-0024-414c-89a6-cbc05022651&title=&width=927.2)\n密码配置成功后重启服务器\n\n1. 启动时查看配置文件：./src/redis-server ./redis.conf\n2. 查看redis进程：ps -f | grep redis\n3. 本地连接Redis：./src/redis-cli -h localhost -p 6379\n4. 查看不输入密码是否可以对Redis进行操作：keys *（橙色框中是不允许）\n5. 则需输入密码登录Redis：auth 密码\n6. 登录成功\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/25847601/1664501322020-1312e33d-e557-471d-829a-7b3a2ea3f25b.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=190&id=u5e262813&margin=%5Bobject%20Object%5D&name=image.png&originHeight=237&originWidth=1034&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28432&status=done&style=none&taskId=u2f518cc5-6f99-465c-83c4-df46b3e285b&title=&width=827.2)\n## 修改Redis连接状态\nRedis默认本地连接\n\n1. 进入redis-4.0.0文件下时 vim redis-conf文件查找bind（输入：/bind）\n2. 注释橙色框选中行（# bind 127.0.0.1）\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/25847601/1664501751303-7b5e20d2-4fa9-4f36-9dac-f88113eb471f.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=516&id=uef989933&margin=%5Bobject%20Object%5D&name=image.png&originHeight=645&originWidth=1159&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56473&status=done&style=none&taskId=u21454d45-ece4-4cc8-81cf-3ee3a327c6c&title=&width=927.2)\n# Redis数据类型\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/25847601/1664503603409-7486794b-a434-4b7b-80bf-a225a541f715.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=354&id=ud29f1d42&margin=%5Bobject%20Object%5D&name=image.png&originHeight=442&originWidth=882&originalType=binary&ratio=1&rotation=0&showTitle=false&size=154743&status=done&style=none&taskId=u74c6f0f8-3960-45c0-bd1d-283bcd38b5e&title=&width=705.6)\n中文教程网：[https://www.redis.net.cn/tutorial/3505.html](https://www.redis.net.cn/tutorial/3505.html)\n## String（字符串）\n\n1. string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。\n2. string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。\n3. string类型是Redis最基本的数据类型，一个键最大能存储512MB。\n### 理解\n一个键对应一个字符串，\n一个地址存储一个数据\n### 实例\n:::info\nredis 127.0.0.1:6379> SET name \"redis.net.cn\"OK\nredis 127.0.0.1:6379> GET name\"redis.net.cn\"\n:::\n在以上实例中我们使用了 Redis 的 **SET** 和 **GET** 命令。键为 name，对应的值为redis.net.cn。\n**注意：**一个键最大能存储512MB。\n\n---\n\n## Hash（哈希）\n\n1. Redis hash 是一个键值对集合。\n2. Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。value值必须是基础类型\n3. 相对于存储json序列化的字符串更加节省性能\n### 理解\n一个键对应一个集合，\n集合中索引可存储多条个数据\n### 实例\n:::info\nredis 127.0.0.1:6379> HMSET user:1 username redis.net.cn password redis.net.cn points 200OK\nredis 127.0.0.1:6379> HGETALL user:1\n1) \"username\"\n2) \"redis.net.cn\"\n3) \"password\"\n4) \"redis.net.cn\"\n5) \"points\"\n6) \"200\"\nredis 127.0.0.1:6379>\n:::\n以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 Redis **HMSET, HEGTALL** 命令，**user:1** 为键值。\n每个 hash 可以存储 232 - 1 键值对（40多亿）。\n\n---\n\n## List（列表）\nRedis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。\n### 理解\n呈现状态为列表状，数据不可通过标识或索引对数据进行获取，\n只能通过列表名查询范围内的多条数据\n### 实例\n:::info\nredis 127.0.0.1:6379> lpush redis.net.cn redis(integer) 1\nredis 127.0.0.1:6379> lpush redis.net.cn mongodb(integer) 2\nredis 127.0.0.1:6379> lpush redis.net.cn rabitmq(integer) 3\n// 查询数据范围 0 -10 条\nredis 127.0.0.1:6379> lrange redis.net.cn 0 10\n1) \"rabitmq\"\n2) \"mongodb\"\n3) \"redis\"\nredis 127.0.0.1:6379>\n:::\n列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。\n\n---\n\n## Set（集合）\nRedis的Set是string类型的无序集合。\n集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。\n### sadd 命令\n添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误。\nsadd key member\n### 理解\n呈现状态为列表状，数据不可通过标识或索引对数据进行获取，\n只能通过命名进行数据获取，而且在数据添加时不允许出现重复插入\n### 实例\n:::info\nredis 127.0.0.1:6379> sadd redis.net.cn redis(integer) 1\nredis 127.0.0.1:6379> sadd redis.net.cn mongodb(integer) 1\nredis 127.0.0.1:6379> sadd redis.net.cn rabitmq(integer) 1\nredis 127.0.0.1:6379> sadd redis.net.cn rabitmq(integer) 0\nredis 127.0.0.1:6379> smembers redis.net.cn \n1) \"rabitmq\"\n2) \"mongodb\"\n3) \"redis\"\n:::\n**注意：**以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。\n集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。\n\n---\n\n## zset(sorted set：有序集合)\nRedis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。\nzset的成员是唯一的,但分数(score)却可以重复。\n### zadd 命令\n添加元素到集合，元素在集合中存在则更新对应score\nzadd key score member \n### 实例\n:::info\nredis 127.0.0.1:6379> zadd redis.net.cn 0 redis(integer) 1\nredis 127.0.0.1:6379> zadd redis.net.cn 0 mongodb(integer) 1\nredis 127.0.0.1:6379> zadd redis.net.cn 0 rabitmq(integer) 1\nredis 127.0.0.1:6379> zadd redis.net.cn 0 rabitmq(integer) 0\nredis 127.0.0.1:6379> ZRANGEBYSCORE redis.net.cn 0 1000 \n1) \"redis\"\n2) \"mongodb\"\n3) \"rabitmq\"\n:::\n","slug":"【Redis】安装与学习","published":1,"updated":"2022-10-21T14:57:37.533Z","_id":"cl96ri60g0001z8ewe3okficz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Redis简介\"><a href=\"#Redis简介\" class=\"headerlink\" title=\"Redis简介\"></a>Redis简介</h1><p>Redis是基于内存进行数据查询的<br>Redis可用作数据库、缓存和消息中间件<br>NoSql，不仅仅是SQL，泛指非关系型数据库。NoSql数据库并不是取代关系型数据库，而是关系型数据库的补充。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><ol>\n<li>缓存（秒杀业务）</li>\n<li>任务队列</li>\n<li>消息队列</li>\n<li>分布式锁</li>\n</ol>\n<h2 id=\"关系型数据库\"><a href=\"#关系型数据库\" class=\"headerlink\" title=\"关系型数据库\"></a>关系型数据库</h2><ol>\n<li>Mysql</li>\n<li>Oracle</li>\n<li>DB2</li>\n<li>SQLServer</li>\n</ol>\n<h2 id=\"非关系型数据库\"><a href=\"#非关系型数据库\" class=\"headerlink\" title=\"非关系型数据库\"></a>非关系型数据库</h2><ol>\n<li>Redis</li>\n<li>Mongo db</li>\n<li>MemCacched</li>\n</ol>\n<h1 id=\"Redis安装\"><a href=\"#Redis安装\" class=\"headerlink\" title=\"Redis安装\"></a>Redis安装</h1><p>镜像文件下载地址：<a href=\"https://download.redis.io/releases/\">https://download.redis.io/releases/</a></p>\n<ol>\n<li><p>将下载的redis.tar.gz文件上传至Linux目录下（例：/usr/addFile/targz）</p>\n</li>\n<li><p>解压redis.tar.gz文件（解压至/usr/addFile文件夹下）<br>:::info<br>tar -zxvf redis-4.0.0.tar.gz  -C /usr/addFile/<br>:::</p>\n</li>\n<li><p>安装Redis的依赖环境g6c,命令：yum install gcc-c+</p>\n</li>\n<li><p>进入/usr/addFile/redis-4.0.0,进行编译，命令：make</p>\n</li>\n<li><p>进入redis的src目录，进行安装，命令：make install</p>\n<h1 id=\"Redis服务启动与停止\"><a href=\"#Redis服务启动与停止\" class=\"headerlink\" title=\"Redis服务启动与停止\"></a>Redis服务启动与停止</h1><p>Linux中redis服务启动，可以使用redis-server（/usr/addFile/redis-4.0.0），默认端口为6379<br>Ctrl+C停止Redis服务</p>\n<h2 id=\"修改Redis运行模式\"><a href=\"#修改Redis运行模式\" class=\"headerlink\" title=\"修改Redis运行模式\"></a>修改Redis运行模式</h2></li>\n<li><p>进入redis-4.0.0文件下时 vim redis-conf文件查找dae （输入：/dae）</p>\n</li>\n<li><p>daemonize no 改为 daemonize yes 则运行模式为后台运行</p>\n</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25847601/1664498711764-cdc8e5dd-9916-4cd3-8196-a499d50763a6.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=516&id=u4e7324a0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=645&originWidth=1159&originalType=binary&ratio=1&rotation=0&showTitle=false&size=67757&status=done&style=none&taskId=u97e97493-3b1d-4fec-a951-b5d5bbf634c&title=&width=927.2\" alt=\"image.png\"></p>\n<h2 id=\"修改Redis密码\"><a href=\"#修改Redis密码\" class=\"headerlink\" title=\"修改Redis密码\"></a>修改Redis密码</h2><ol>\n<li>进入redis-4.0.0文件下时 vim redis-conf文件查找password （输入：/password）</li>\n<li>将下图中#取出 修改fooabred为自定义密码</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25847601/1664500114163-7ec1ecb3-8ce2-4d19-a7e7-9a5047eb41c4.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=516&id=u1b58df5c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=645&originWidth=1159&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57202&status=done&style=none&taskId=uacfc467a-0024-414c-89a6-cbc05022651&title=&width=927.2\" alt=\"image.png\"><br>密码配置成功后重启服务器</p>\n<ol>\n<li>启动时查看配置文件：./src/redis-server ./redis.conf</li>\n<li>查看redis进程：ps -f | grep redis</li>\n<li>本地连接Redis：./src/redis-cli -h localhost -p 6379</li>\n<li>查看不输入密码是否可以对Redis进行操作：keys *（橙色框中是不允许）</li>\n<li>则需输入密码登录Redis：auth 密码</li>\n<li>登录成功</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25847601/1664501322020-1312e33d-e557-471d-829a-7b3a2ea3f25b.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=190&id=u5e262813&margin=%5Bobject%20Object%5D&name=image.png&originHeight=237&originWidth=1034&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28432&status=done&style=none&taskId=u2f518cc5-6f99-465c-83c4-df46b3e285b&title=&width=827.2\" alt=\"image.png\"></p>\n<h2 id=\"修改Redis连接状态\"><a href=\"#修改Redis连接状态\" class=\"headerlink\" title=\"修改Redis连接状态\"></a>修改Redis连接状态</h2><p>Redis默认本地连接</p>\n<ol>\n<li>进入redis-4.0.0文件下时 vim redis-conf文件查找bind（输入：/bind）</li>\n<li>注释橙色框选中行（# bind 127.0.0.1）</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25847601/1664501751303-7b5e20d2-4fa9-4f36-9dac-f88113eb471f.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=516&id=uef989933&margin=%5Bobject%20Object%5D&name=image.png&originHeight=645&originWidth=1159&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56473&status=done&style=none&taskId=u21454d45-ece4-4cc8-81cf-3ee3a327c6c&title=&width=927.2\" alt=\"image.png\"></p>\n<h1 id=\"Redis数据类型\"><a href=\"#Redis数据类型\" class=\"headerlink\" title=\"Redis数据类型\"></a>Redis数据类型</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25847601/1664503603409-7486794b-a434-4b7b-80bf-a225a541f715.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=354&id=ud29f1d42&margin=%5Bobject%20Object%5D&name=image.png&originHeight=442&originWidth=882&originalType=binary&ratio=1&rotation=0&showTitle=false&size=154743&status=done&style=none&taskId=u74c6f0f8-3960-45c0-bd1d-283bcd38b5e&title=&width=705.6\" alt=\"image.png\"><br>中文教程网：<a href=\"https://www.redis.net.cn/tutorial/3505.html\">https://www.redis.net.cn/tutorial/3505.html</a></p>\n<h2 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a>String（字符串）</h2><ol>\n<li>string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</li>\n<li>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。</li>\n<li>string类型是Redis最基本的数据类型，一个键最大能存储512MB。<h3 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h3>一个键对应一个字符串，<br>一个地址存储一个数据<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3>:::info<br>redis 127.0.0.1:6379&gt; SET name “redis.net.cn”OK<br>redis 127.0.0.1:6379&gt; GET name”redis.net.cn”<br>:::<br>在以上实例中我们使用了 Redis 的 <strong>SET</strong> 和 <strong>GET</strong> 命令。键为 name，对应的值为redis.net.cn。</li>\n</ol>\n<p><strong>注意：</strong>一个键最大能存储512MB。</p>\n<hr>\n<h2 id=\"Hash（哈希）\"><a href=\"#Hash（哈希）\" class=\"headerlink\" title=\"Hash（哈希）\"></a>Hash（哈希）</h2><ol>\n<li>Redis hash 是一个键值对集合。</li>\n<li>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。value值必须是基础类型</li>\n<li>相对于存储json序列化的字符串更加节省性能<h3 id=\"理解-1\"><a href=\"#理解-1\" class=\"headerlink\" title=\"理解\"></a>理解</h3>一个键对应一个集合，<br>集合中索引可存储多条个数据<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3>:::info<br>redis 127.0.0.1:6379&gt; HMSET user:1 username redis.net.cn password redis.net.cn points 200OK<br>redis 127.0.0.1:6379&gt; HGETALL user:1</li>\n</ol>\n<ol>\n<li>“username”</li>\n<li>“redis.net.cn”</li>\n<li>“password”</li>\n<li>“redis.net.cn”</li>\n<li>“points”</li>\n<li>“200”<br>redis 127.0.0.1:6379&gt;<br>:::<br>以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 Redis <strong>HMSET, HEGTALL</strong> 命令，<strong>user:1</strong> 为键值。<br>每个 hash 可以存储 232 - 1 键值对（40多亿）。</li>\n</ol>\n<hr>\n<h2 id=\"List（列表）\"><a href=\"#List（列表）\" class=\"headerlink\" title=\"List（列表）\"></a>List（列表）</h2><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。</p>\n<h3 id=\"理解-2\"><a href=\"#理解-2\" class=\"headerlink\" title=\"理解\"></a>理解</h3><p>呈现状态为列表状，数据不可通过标识或索引对数据进行获取，<br>只能通过列表名查询范围内的多条数据</p>\n<h3 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>:::info<br>redis 127.0.0.1:6379&gt; lpush redis.net.cn redis(integer) 1<br>redis 127.0.0.1:6379&gt; lpush redis.net.cn mongodb(integer) 2<br>redis 127.0.0.1:6379&gt; lpush redis.net.cn rabitmq(integer) 3<br>// 查询数据范围 0 -10 条<br>redis 127.0.0.1:6379&gt; lrange redis.net.cn 0 10</p>\n<ol>\n<li>“rabitmq”</li>\n<li>“mongodb”</li>\n<li>“redis”<br>redis 127.0.0.1:6379&gt;<br>:::<br>列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。</li>\n</ol>\n<hr>\n<h2 id=\"Set（集合）\"><a href=\"#Set（集合）\" class=\"headerlink\" title=\"Set（集合）\"></a>Set（集合）</h2><p>Redis的Set是string类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>\n<h3 id=\"sadd-命令\"><a href=\"#sadd-命令\" class=\"headerlink\" title=\"sadd 命令\"></a>sadd 命令</h3><p>添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误。<br>sadd key member</p>\n<h3 id=\"理解-3\"><a href=\"#理解-3\" class=\"headerlink\" title=\"理解\"></a>理解</h3><p>呈现状态为列表状，数据不可通过标识或索引对数据进行获取，<br>只能通过命名进行数据获取，而且在数据添加时不允许出现重复插入</p>\n<h3 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>:::info<br>redis 127.0.0.1:6379&gt; sadd redis.net.cn redis(integer) 1<br>redis 127.0.0.1:6379&gt; sadd redis.net.cn mongodb(integer) 1<br>redis 127.0.0.1:6379&gt; sadd redis.net.cn rabitmq(integer) 1<br>redis 127.0.0.1:6379&gt; sadd redis.net.cn rabitmq(integer) 0<br>redis 127.0.0.1:6379&gt; smembers redis.net.cn </p>\n<ol>\n<li>“rabitmq”</li>\n<li>“mongodb”</li>\n<li>“redis”<br>:::</li>\n</ol>\n<p><strong>注意：</strong>以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。<br>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>\n<hr>\n<h2 id=\"zset-sorted-set：有序集合\"><a href=\"#zset-sorted-set：有序集合\" class=\"headerlink\" title=\"zset(sorted set：有序集合)\"></a>zset(sorted set：有序集合)</h2><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>zset的成员是唯一的,但分数(score)却可以重复。</p>\n<h3 id=\"zadd-命令\"><a href=\"#zadd-命令\" class=\"headerlink\" title=\"zadd 命令\"></a>zadd 命令</h3><p>添加元素到集合，元素在集合中存在则更新对应score<br>zadd key score member </p>\n<h3 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>:::info<br>redis 127.0.0.1:6379&gt; zadd redis.net.cn 0 redis(integer) 1<br>redis 127.0.0.1:6379&gt; zadd redis.net.cn 0 mongodb(integer) 1<br>redis 127.0.0.1:6379&gt; zadd redis.net.cn 0 rabitmq(integer) 1<br>redis 127.0.0.1:6379&gt; zadd redis.net.cn 0 rabitmq(integer) 0<br>redis 127.0.0.1:6379&gt; ZRANGEBYSCORE redis.net.cn 0 1000 </p>\n<ol>\n<li>“redis”</li>\n<li>“mongodb”</li>\n<li>“rabitmq”<br>:::</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redis简介\"><a href=\"#Redis简介\" class=\"headerlink\" title=\"Redis简介\"></a>Redis简介</h1><p>Redis是基于内存进行数据查询的<br>Redis可用作数据库、缓存和消息中间件<br>NoSql，不仅仅是SQL，泛指非关系型数据库。NoSql数据库并不是取代关系型数据库，而是关系型数据库的补充。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><ol>\n<li>缓存（秒杀业务）</li>\n<li>任务队列</li>\n<li>消息队列</li>\n<li>分布式锁</li>\n</ol>\n<h2 id=\"关系型数据库\"><a href=\"#关系型数据库\" class=\"headerlink\" title=\"关系型数据库\"></a>关系型数据库</h2><ol>\n<li>Mysql</li>\n<li>Oracle</li>\n<li>DB2</li>\n<li>SQLServer</li>\n</ol>\n<h2 id=\"非关系型数据库\"><a href=\"#非关系型数据库\" class=\"headerlink\" title=\"非关系型数据库\"></a>非关系型数据库</h2><ol>\n<li>Redis</li>\n<li>Mongo db</li>\n<li>MemCacched</li>\n</ol>\n<h1 id=\"Redis安装\"><a href=\"#Redis安装\" class=\"headerlink\" title=\"Redis安装\"></a>Redis安装</h1><p>镜像文件下载地址：<a href=\"https://download.redis.io/releases/\">https://download.redis.io/releases/</a></p>\n<ol>\n<li><p>将下载的redis.tar.gz文件上传至Linux目录下（例：/usr/addFile/targz）</p>\n</li>\n<li><p>解压redis.tar.gz文件（解压至/usr/addFile文件夹下）<br>:::info<br>tar -zxvf redis-4.0.0.tar.gz  -C /usr/addFile/<br>:::</p>\n</li>\n<li><p>安装Redis的依赖环境g6c,命令：yum install gcc-c+</p>\n</li>\n<li><p>进入/usr/addFile/redis-4.0.0,进行编译，命令：make</p>\n</li>\n<li><p>进入redis的src目录，进行安装，命令：make install</p>\n<h1 id=\"Redis服务启动与停止\"><a href=\"#Redis服务启动与停止\" class=\"headerlink\" title=\"Redis服务启动与停止\"></a>Redis服务启动与停止</h1><p>Linux中redis服务启动，可以使用redis-server（/usr/addFile/redis-4.0.0），默认端口为6379<br>Ctrl+C停止Redis服务</p>\n<h2 id=\"修改Redis运行模式\"><a href=\"#修改Redis运行模式\" class=\"headerlink\" title=\"修改Redis运行模式\"></a>修改Redis运行模式</h2></li>\n<li><p>进入redis-4.0.0文件下时 vim redis-conf文件查找dae （输入：/dae）</p>\n</li>\n<li><p>daemonize no 改为 daemonize yes 则运行模式为后台运行</p>\n</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25847601/1664498711764-cdc8e5dd-9916-4cd3-8196-a499d50763a6.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=516&id=u4e7324a0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=645&originWidth=1159&originalType=binary&ratio=1&rotation=0&showTitle=false&size=67757&status=done&style=none&taskId=u97e97493-3b1d-4fec-a951-b5d5bbf634c&title=&width=927.2\" alt=\"image.png\"></p>\n<h2 id=\"修改Redis密码\"><a href=\"#修改Redis密码\" class=\"headerlink\" title=\"修改Redis密码\"></a>修改Redis密码</h2><ol>\n<li>进入redis-4.0.0文件下时 vim redis-conf文件查找password （输入：/password）</li>\n<li>将下图中#取出 修改fooabred为自定义密码</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25847601/1664500114163-7ec1ecb3-8ce2-4d19-a7e7-9a5047eb41c4.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=516&id=u1b58df5c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=645&originWidth=1159&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57202&status=done&style=none&taskId=uacfc467a-0024-414c-89a6-cbc05022651&title=&width=927.2\" alt=\"image.png\"><br>密码配置成功后重启服务器</p>\n<ol>\n<li>启动时查看配置文件：./src/redis-server ./redis.conf</li>\n<li>查看redis进程：ps -f | grep redis</li>\n<li>本地连接Redis：./src/redis-cli -h localhost -p 6379</li>\n<li>查看不输入密码是否可以对Redis进行操作：keys *（橙色框中是不允许）</li>\n<li>则需输入密码登录Redis：auth 密码</li>\n<li>登录成功</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25847601/1664501322020-1312e33d-e557-471d-829a-7b3a2ea3f25b.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=190&id=u5e262813&margin=%5Bobject%20Object%5D&name=image.png&originHeight=237&originWidth=1034&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28432&status=done&style=none&taskId=u2f518cc5-6f99-465c-83c4-df46b3e285b&title=&width=827.2\" alt=\"image.png\"></p>\n<h2 id=\"修改Redis连接状态\"><a href=\"#修改Redis连接状态\" class=\"headerlink\" title=\"修改Redis连接状态\"></a>修改Redis连接状态</h2><p>Redis默认本地连接</p>\n<ol>\n<li>进入redis-4.0.0文件下时 vim redis-conf文件查找bind（输入：/bind）</li>\n<li>注释橙色框选中行（# bind 127.0.0.1）</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25847601/1664501751303-7b5e20d2-4fa9-4f36-9dac-f88113eb471f.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=516&id=uef989933&margin=%5Bobject%20Object%5D&name=image.png&originHeight=645&originWidth=1159&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56473&status=done&style=none&taskId=u21454d45-ece4-4cc8-81cf-3ee3a327c6c&title=&width=927.2\" alt=\"image.png\"></p>\n<h1 id=\"Redis数据类型\"><a href=\"#Redis数据类型\" class=\"headerlink\" title=\"Redis数据类型\"></a>Redis数据类型</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25847601/1664503603409-7486794b-a434-4b7b-80bf-a225a541f715.png#clientId=u25e87111-eb16-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=354&id=ud29f1d42&margin=%5Bobject%20Object%5D&name=image.png&originHeight=442&originWidth=882&originalType=binary&ratio=1&rotation=0&showTitle=false&size=154743&status=done&style=none&taskId=u74c6f0f8-3960-45c0-bd1d-283bcd38b5e&title=&width=705.6\" alt=\"image.png\"><br>中文教程网：<a href=\"https://www.redis.net.cn/tutorial/3505.html\">https://www.redis.net.cn/tutorial/3505.html</a></p>\n<h2 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a>String（字符串）</h2><ol>\n<li>string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</li>\n<li>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。</li>\n<li>string类型是Redis最基本的数据类型，一个键最大能存储512MB。<h3 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h3>一个键对应一个字符串，<br>一个地址存储一个数据<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3>:::info<br>redis 127.0.0.1:6379&gt; SET name “redis.net.cn”OK<br>redis 127.0.0.1:6379&gt; GET name”redis.net.cn”<br>:::<br>在以上实例中我们使用了 Redis 的 <strong>SET</strong> 和 <strong>GET</strong> 命令。键为 name，对应的值为redis.net.cn。</li>\n</ol>\n<p><strong>注意：</strong>一个键最大能存储512MB。</p>\n<hr>\n<h2 id=\"Hash（哈希）\"><a href=\"#Hash（哈希）\" class=\"headerlink\" title=\"Hash（哈希）\"></a>Hash（哈希）</h2><ol>\n<li>Redis hash 是一个键值对集合。</li>\n<li>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。value值必须是基础类型</li>\n<li>相对于存储json序列化的字符串更加节省性能<h3 id=\"理解-1\"><a href=\"#理解-1\" class=\"headerlink\" title=\"理解\"></a>理解</h3>一个键对应一个集合，<br>集合中索引可存储多条个数据<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3>:::info<br>redis 127.0.0.1:6379&gt; HMSET user:1 username redis.net.cn password redis.net.cn points 200OK<br>redis 127.0.0.1:6379&gt; HGETALL user:1</li>\n</ol>\n<ol>\n<li>“username”</li>\n<li>“redis.net.cn”</li>\n<li>“password”</li>\n<li>“redis.net.cn”</li>\n<li>“points”</li>\n<li>“200”<br>redis 127.0.0.1:6379&gt;<br>:::<br>以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 Redis <strong>HMSET, HEGTALL</strong> 命令，<strong>user:1</strong> 为键值。<br>每个 hash 可以存储 232 - 1 键值对（40多亿）。</li>\n</ol>\n<hr>\n<h2 id=\"List（列表）\"><a href=\"#List（列表）\" class=\"headerlink\" title=\"List（列表）\"></a>List（列表）</h2><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。</p>\n<h3 id=\"理解-2\"><a href=\"#理解-2\" class=\"headerlink\" title=\"理解\"></a>理解</h3><p>呈现状态为列表状，数据不可通过标识或索引对数据进行获取，<br>只能通过列表名查询范围内的多条数据</p>\n<h3 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>:::info<br>redis 127.0.0.1:6379&gt; lpush redis.net.cn redis(integer) 1<br>redis 127.0.0.1:6379&gt; lpush redis.net.cn mongodb(integer) 2<br>redis 127.0.0.1:6379&gt; lpush redis.net.cn rabitmq(integer) 3<br>// 查询数据范围 0 -10 条<br>redis 127.0.0.1:6379&gt; lrange redis.net.cn 0 10</p>\n<ol>\n<li>“rabitmq”</li>\n<li>“mongodb”</li>\n<li>“redis”<br>redis 127.0.0.1:6379&gt;<br>:::<br>列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。</li>\n</ol>\n<hr>\n<h2 id=\"Set（集合）\"><a href=\"#Set（集合）\" class=\"headerlink\" title=\"Set（集合）\"></a>Set（集合）</h2><p>Redis的Set是string类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>\n<h3 id=\"sadd-命令\"><a href=\"#sadd-命令\" class=\"headerlink\" title=\"sadd 命令\"></a>sadd 命令</h3><p>添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误。<br>sadd key member</p>\n<h3 id=\"理解-3\"><a href=\"#理解-3\" class=\"headerlink\" title=\"理解\"></a>理解</h3><p>呈现状态为列表状，数据不可通过标识或索引对数据进行获取，<br>只能通过命名进行数据获取，而且在数据添加时不允许出现重复插入</p>\n<h3 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>:::info<br>redis 127.0.0.1:6379&gt; sadd redis.net.cn redis(integer) 1<br>redis 127.0.0.1:6379&gt; sadd redis.net.cn mongodb(integer) 1<br>redis 127.0.0.1:6379&gt; sadd redis.net.cn rabitmq(integer) 1<br>redis 127.0.0.1:6379&gt; sadd redis.net.cn rabitmq(integer) 0<br>redis 127.0.0.1:6379&gt; smembers redis.net.cn </p>\n<ol>\n<li>“rabitmq”</li>\n<li>“mongodb”</li>\n<li>“redis”<br>:::</li>\n</ol>\n<p><strong>注意：</strong>以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。<br>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>\n<hr>\n<h2 id=\"zset-sorted-set：有序集合\"><a href=\"#zset-sorted-set：有序集合\" class=\"headerlink\" title=\"zset(sorted set：有序集合)\"></a>zset(sorted set：有序集合)</h2><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>zset的成员是唯一的,但分数(score)却可以重复。</p>\n<h3 id=\"zadd-命令\"><a href=\"#zadd-命令\" class=\"headerlink\" title=\"zadd 命令\"></a>zadd 命令</h3><p>添加元素到集合，元素在集合中存在则更新对应score<br>zadd key score member </p>\n<h3 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>:::info<br>redis 127.0.0.1:6379&gt; zadd redis.net.cn 0 redis(integer) 1<br>redis 127.0.0.1:6379&gt; zadd redis.net.cn 0 mongodb(integer) 1<br>redis 127.0.0.1:6379&gt; zadd redis.net.cn 0 rabitmq(integer) 1<br>redis 127.0.0.1:6379&gt; zadd redis.net.cn 0 rabitmq(integer) 0<br>redis 127.0.0.1:6379&gt; ZRANGEBYSCORE redis.net.cn 0 1000 </p>\n<ol>\n<li>“redis”</li>\n<li>“mongodb”</li>\n<li>“rabitmq”<br>:::</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl96ri60g0001z8ewe3okficz","tag_id":"cl9im944q0000h4ew5obcgeko","_id":"cl9im944q0001h4ew7y7w91eh"}],"Tag":[{"name":"-运维","_id":"cl9im944q0000h4ew5obcgeko"}]}}